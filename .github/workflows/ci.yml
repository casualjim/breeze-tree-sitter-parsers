name: Build and Release Tree-sitter Parsers

on:
  # Run weekly to keep cache fresh
  schedule:
    - cron: '0 0 * * 0'
  # Allow manual trigger
  workflow_dispatch:
  # Run on push to main
  push:
    branches:
      - main
  # Run on pull requests
  pull_request:
    branches:
      - main

jobs:
  build-all-platforms:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: '0.14.1'

      - name: Install xwin
        run: cargo install xwin --locked

      - name: Install zigbuild
        run: cargo install cargo-zigbuild --locked

      - name: Cache MSVC headers
        id: cache-msvc
        uses: actions/cache@v4
        with:
          path: |
            ./cache/msvc
            ./include/msvc
          key: msvc-headers-${{ runner.os }}-v1

      - name: Download MSVC headers if not cached
        if: steps.cache-msvc.outputs.cache-hit != 'true'
        run: xwin --accept-license --cache-dir ./cache/msvc splat --output ./include/msvc

      - name: Install dependencies
        run: npm install --no-optional

      - name: Cache grammar repositories
        id: cache-grammars
        uses: actions/cache@v4
        with:
          path: grammars
          key: grammars-${{ hashFiles('grammars.json') }}-v1
          restore-keys: |
            grammars-${{ hashFiles('grammars.json') }}-
            grammars-

      - name: Fetch grammars
        if: steps.cache-grammars.outputs.cache-hit != 'true'
        run: npm run fetch

      - name: Save grammar cache
        if: steps.cache-grammars.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: grammars
          key: grammars-${{ hashFiles('grammars.json') }}-v1

      - name: Build for all platforms
        run: npm run build:all

      - name: Validate Linux build
        run: npm run validate

      - name: Validate Windows build (cross-compilation)
        run: |
          rustup target add x86_64-pc-windows-msvc
          
          # Set up include paths for MSVC headers (for both C and C++)
          export CFLAGS_x86_64_pc_windows_msvc="-I$PWD/include/msvc/crt/include -I$PWD/include/msvc/sdk/include/ucrt -I$PWD/include/msvc/sdk/include/um -I$PWD/include/msvc/sdk/include/shared"
          export CXXFLAGS_x86_64_pc_windows_msvc="-I$PWD/include/msvc/crt/include -I$PWD/include/msvc/sdk/include/ucrt -I$PWD/include/msvc/sdk/include/um -I$PWD/include/msvc/sdk/include/shared"
          
          cd validation
          cargo zigbuild --release --target x86_64-pc-windows-msvc
          echo "âœ… Windows binary successfully linked (cross-compilation test)"

      - name: Create npm packages
        run: npm run create-packages

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tree-sitter-parsers-all-platforms
          path: |
            dist/
            platforms/
          retention-days: 7

  test-distribution:
    needs: build-all-platforms
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: tree-sitter-parsers-all-platforms

      - name: Setup Rust for validation
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Validate built libraries
        run: npm run validate

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test distribution for x64
        run: npm run test-distribution:x64

      - name: Test distribution for arm64
        run: npm run test-distribution:arm64

  create-release:
    needs: test-distribution
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get current version
        id: get-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: tree-sitter-parsers-all-platforms

      - name: Create release archives
        run: |
          # Create archives for each platform
          cd dist
          for file in libtree-sitter-parsers-all-*.a; do
            if [ -f "$file" ]; then
              # Extract platform from filename
              platform=${file#libtree-sitter-parsers-all-}
              platform=${platform%.a}
              json_file="grammars-${platform}.json"
              
              if [ -f "$json_file" ]; then
                tar -czf "${file%.a}.tar.gz" "$file" "$json_file"
              else
                echo "Warning: JSON file $json_file not found for $file"
              fi
            fi
          done
          cd ..

      - name: Create git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.get-version.outputs.version }}" -m "Release v${{ steps.get-version.outputs.version }}"
          git push origin "v${{ steps.get-version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: Release v${{ steps.get-version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/*.tar.gz
            dist/*.a
            dist/*.json
          body: |
            # Tree-sitter Parsers v${{ steps.version-check.outputs.version }}
            
            Pre-compiled Tree-sitter parsers for 163 programming languages.
            
            ## Installation
            
            ```bash
            npm install @kumos/tree-sitter-parsers
            ```
            
            ## Platform Support
            
            - Linux x64 (glibc and musl)
            - Linux ARM64 (glibc and musl)
            - macOS x64 and ARM64
            - Windows x64 and ARM64
            
            ## Changes
            
            See [grammars.json](https://github.com/${{ github.repository }}/blob/v${{ steps.get-version.outputs.version }}/grammars.json) for the complete list of included parsers.

  publish-npm:
    needs: create-release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: tree-sitter-parsers-all-platforms

      - name: Wait for GitHub release assets
        run: |
          echo "Waiting 30 seconds for GitHub release assets to be available..."
          sleep 30

      - name: Publish packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm run publish-all

      - name: Bump version for next release
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Store the version we just released
          RELEASED_VERSION=$(node -p "require('./package.json').version")
          
          # Pull latest changes
          git pull origin main
          
          # Check if version already changed
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "$RELEASED_VERSION" ]; then
            echo "Version already bumped by another build (current: $CURRENT_VERSION, released: $RELEASED_VERSION)"
            exit 0
          fi
          
          # Bump patch version
          npm version patch --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          
          # Update platform package versions in optionalDependencies
          node -e "
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          const newVersion = pkg.version;
          
          // Update all optionalDependencies to new version
          for (const dep in pkg.optionalDependencies) {
            if (dep.startsWith('@kumos/tree-sitter-parsers-')) {
              pkg.optionalDependencies[dep] = newVersion;
            }
          }
          
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          
          # Commit and push with lease to prevent race conditions
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          
          # Only ignore errors for the push command
          set +e
          git push --force-with-lease origin main
          PUSH_RESULT=$?
          set -e
          
          if [ $PUSH_RESULT -eq 0 ]; then
            echo "Successfully bumped version to $NEW_VERSION"
          else
            echo "Failed to push version bump (likely due to concurrent build)"
            echo "Version will remain at $CURRENT_VERSION for next manual commit"
          fi
          
          # Always exit successfully - the release already completed
          exit 0